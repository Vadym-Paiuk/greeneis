//mixins
$maxWidth: 1440;
$mobWidth: 428;
$minWidth: 320;
$rootFontSize: 16;

//convert px to rem
@function rem($value) {
	$remValue: calc($value / $rootFontSize) + rem;
	@return $remValue;
}

//convert px to em
@function em($value, $const) {
	$emValue: calc($value / $const) + em;
	@return $emValue;
}

//convert px to percent
@function percent($value, $const) {
	$percent: '%';
	$percentValue: calc($value / $const * 100)#{$percent};
	@return $percentValue;
}

//convert px to vw
@function vw($value) {
	$vwValue: calc($value / $maxWidth * 100) + vw;
	@return $vwValue;
}

//convert px to vw for mobile
@function vwm($value) {
	$vwValue: calc($value / $mobWidth * 100) + vw;
	@return $vwValue;
}

@mixin bf-af {
	position: absolute;
	content: "";
}

//add background styles
@mixin bg-set($bg_size,$pos: center) {
	background-size: $bg_size;
	background-position: $pos;
	background-repeat: no-repeat;
}

@mixin media-breakpoint-down($size) {
	@if $size==xxl {
		@media (max-width: 1500px) {
			@content;
		}
	} @else if $size==xl {
		@media (max-width: 1200px) {
			@content;
		}
	} @else if $size==lg {
		@media (max-width: 991px) {
			@content;
		}
	} @else if $size==md {
		@media (max-width: 767px) {
			@content;
		}
	} @else if $size==sm {
		@media (max-width: 575px) {
			@content;
		}
	} @else if $size==xs {
		@media (max-width: 479px) {
			@content;
		}
	}
}


@mixin media-breakpoint-up($size) {
	@if $size==xxl {
		@media (min-width: 1400px) {
			@content;
		}
	} @else if $size==xl {
		@media (min-width: 1200px) {
			@content;
		}
	} @else if $size==lg {
		@media (min-width: 991px) {
			@content;
		}
	} @else if $size==md {
		@media (min-width: 767px) {
			@content;
		}
	} @else if $size==sm {
		@media (min-width: 575px) {
			@content;
		}
	} @else if $size==xs {
		@media (min-width: 479px) {
			@content;
		}
	}
}

@mixin font-face($font-name, $path, $weight: normal, $style: normal) {
	@font-face {
		font-family: quote($font-name);
		src: url($path + ".eot");
		src: url($path + ".eot?#iefix") format("embedded-opentype"), url($path + ".woff") format("woff"), url($path + ".woff2") format("woff2"), url($path + ".ttf") format("truetype"), url($path + ".svg##{$font-name}") format("svg"), url($path + ".eot") format("embedded-opentype"), url($path + ".eot?#iefix") format("embedded-opentype");
		font-weight: $weight;
		font-style: $style;
	}
}

@mixin font-size-responsive($max-font-size: 21px, $min-font-size: 12px, $lower-range: 480px, $upper-range: 1200px) {
	$font-size-range: $max-font-size - $min-font-size;
	$viewport-range: $upper-range - $lower-range;
	
	font-size: calc(#{$min-font-size} + #{$font-size-range} * ((100vw - #{$lower-range}) / #{$viewport-range}));
	
	@media screen and (max-width: $lower-range) {
		font-size: $min-font-size;
	}
	
	@media screen and (min-width: $upper-range) {
		font-size: $max-font-size;
	}
}

@mixin list-unstyled {
	margin: 0;
	padding: 0;
	list-style: none;
}